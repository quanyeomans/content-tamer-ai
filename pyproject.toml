[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "content-tamer-ai"
version = "2.0.0"
description = "AI-powered document intelligence for organizing digital content. Evolved from sort-rename-move-pdf to provide comprehensive multi-format content organization."
authors = [
    {name = "Content Tamer AI Project"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "pypdf>=6.0.0",
    "tiktoken>=0.11.0",
    "tqdm>=4.67.1",
    "requests>=2.32.5",
    "pymupdf>=1.26.3",
    "pillow>=11.3.0",
    "pytesseract>=0.3.13",
]

[project.optional-dependencies]
openai = ["openai>=1.0.0"]
claude = ["anthropic>=0.3.0"]
gemini = ["google-genai>=0.3.0"]
dev = [
    "pytest>=8.4.1",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
]
all = [
    "openai>=1.0.0",
    "anthropic>=0.3.0", 
    "google-genai>=0.3.0",
    "pytest>=8.4.1",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
]

[project.scripts]
content-tamer-ai = "src.main:main"
ct = "src.main:main"

[project.urls]
Homepage = "https://github.com/quanyeomans/content-tamer-ai"
Repository = "https://github.com/quanyeomans/content-tamer-ai"
Issues = "https://github.com/quanyeomans/content-tamer-ai/issues"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual adoption
disallow_incomplete_defs = false  # Gradual adoption
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "fitz.*",
    "pytesseract.*",
    "google.genai.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

# Pyright configuration
[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "tests"
]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.8"
pythonPlatform = "All"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "install.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]