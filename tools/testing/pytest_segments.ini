# Test Execution Segmentation Configuration
# Addresses the three fundamental test execution issues:
# 1. Segmented execution based on code change analysis
# 2. Proper sequencing to isolate slow runners  
# 3. Atomic performance evaluation with appropriate timeouts

[pytest-segments]

# Fast Tests (< 2 seconds per test)
# Run first for rapid feedback on basic functionality
fast_tests = [
    "tests/unit/shared/infrastructure/",
    "tests/unit/shared/file_operations/", 
    "tests/unit/shared/display/test_cli_display.py",
    "tests/unit/shared/display/test_progress_display.py",
    "tests/unit/domains/ai_integration/test_hardware_detection.py",
    "tests/unit/orchestration/"
]

# Medium Tests (2-10 seconds per test)  
# Include domain services without heavy ML
medium_tests = [
    "tests/unit/domains/content/",
    "tests/unit/shared/display/test_display_manager.py",
    "tests/unit/shared/display/test_rich_testing_utils.py",
    "tests/contracts/"
]

# Slow Tests (10+ seconds per test)
# ML-heavy tests that load spaCy, transformers, etc.
# Run last and with extended timeouts
slow_tests = [
    "tests/unit/domains/organization/test_clustering_service.py",
    "tests/unit/domains/organization/test_learning_service.py", 
    "tests/unit/domains/organization/test_organization_service.py",
    "tests/integration/cross_domain/test_organization_workflow.py"
]

# Integration Tests (variable timing)
# Run separately to isolate component interaction issues
integration_tests = [
    "tests/integration/",
    "tests/contracts/",
    "tests/domains/"
]

# E2E Tests (longest running)  
# Run last with maximum timeouts and proper setup
e2e_tests = [
    "tests/e2e/",
    "tests/features/"
]

# Code Change Dependency Mapping
# Map source code areas to relevant test segments for targeted execution

[code-to-tests]

# AI Integration Changes -> AI Tests Only
"src/domains/ai_integration/" = ["tests/unit/domains/ai_integration/", "tests/domains/ai_integration/"]

# Content Processing Changes -> Content Tests + Integration  
"src/domains/content/" = ["tests/unit/domains/content/", "tests/domains/content/", "tests/integration/file_processing/"]

# Organization Changes -> Organization Tests (SLOW)
"src/domains/organization/" = ["tests/unit/domains/organization/", "tests/integration/cross_domain/", "tests/integration/domains/"]

# Display Changes -> Display Tests + Rich UI
"src/shared/display/" = ["tests/unit/shared/display/", "tests/contracts/test_display_manager_contracts.py"]

# Infrastructure Changes -> Fast Infrastructure Tests
"src/shared/infrastructure/" = ["tests/unit/shared/infrastructure/"]

# Interface Changes -> Interface Tests + E2E
"src/interfaces/" = ["tests/interfaces/", "tests/e2e/"]

# Orchestration Changes -> Integration + E2E
"src/orchestration/" = ["tests/unit/orchestration/", "tests/integration/", "tests/e2e/"]

[execution-timeouts]

# Timeout settings by test category
fast_timeout = 30      # 30 seconds for fast tests
medium_timeout = 120   # 2 minutes for medium tests  
slow_timeout = 600     # 10 minutes for ML-heavy tests
integration_timeout = 300  # 5 minutes for integration tests
e2e_timeout = 1200     # 20 minutes for complete E2E workflows

[performance-thresholds]

# Performance alerts (when individual tests exceed these thresholds)
fast_test_alert = 2.0    # Alert if "fast" test > 2 seconds
medium_test_alert = 10.0 # Alert if "medium" test > 10 seconds  
slow_test_alert = 60.0   # Alert if "slow" test > 60 seconds

# ML model loading acceptable delays
spacy_model_load = 15.0  # spaCy model loading acceptable up to 15s
sklearn_init = 5.0       # scikit-learn initialization up to 5s
transformers_load = 30.0 # Sentence transformers up to 30s